# The rules in this file detect "generic" secrets.
# Generic secrets do not have well-defined structure like most new API token schemes do.
# In particular, there isn't some notable prefix to search for, nor is there a
# fixed length and alphabet for the secret content.
# Because of all this, the patterns in these rules tend to be pretty complex, in
# an attempt to avoid false positives.
# These rules all have relatively bad precision and recall.

rules:

- name: Generic Secret
  id: np.generic.1

  pattern: |
    (?x)(?i)
    secret
    .{0,20}
    \b
    ([0-9a-z]{32,64})
    \b

  categories: [fuzzy, generic, secret]

  examples:
  - '    private static String CLIENT_SECRET = "6fb1cff7690db9ac066cadbbde8e3c078efdabcf";'

  # FIXME: extend this rule so these examples get matched
  negative_examples:
  - "    client_credential='5pX8Q~MmTI8OMBJFVqMlFR4DE3Spz6Qm.xO.Gbf-'"
  - "    secret_access_key = 'abcdefg12346+FJQCK'"
  - '    Ldap password               ----   H7IKC85R#@4$'


- name: Generic API Key
  id: np.generic.2

  pattern: |
    (?x)(?i)
    (?: api_key | apikey | access_key | accesskey )
    .{0,3}
    [\ \t]* (?: : | = | := | => | , | ' | " ) [\ \t]*
    .{0,3}
    \b
    ([0-9a-z][0-9a-z\-._/+]{30,62}[0-9a-z])
    \b

  categories: [fuzzy, generic, secret]

  examples:
  - 'API_KEY = "951bc382db9abad29c68634761dd6e19"'
  - 'buildConfigField ''String'' , ''API_KEY'' , ''"951bc382db9cfee29c68634761dd6e19"''	API_KEY	'

  negative_examples:
  - 'name="ws_plugin__s2member_amazon_s3_comp_files_access_key" id="ws-plugin--s2member-amazon-s3-comp-files-access-key"'


- name: Generic Username and Password
  id: np.generic.3

  pattern: |
    (?x)
    (?: username | USERNAME | user | USER)       (?# username context keyword )
    [\ \t]* = [\ \t]*                            (?# assignment / binder, sans newline )
    ["'] ([a-zA-Z0-9.@_\-+]{3,30}) ["']          (?# quoted username )
    \s* [,;]? \s*                                (?# optional assignment separator )
    (?: \s* (?: \# | //) [^\n\r]*[\n\r])*        (?# optional line comments )
    (?: password | pass | PASSWORD | PASS)       (?# password context keyword )
    [\ \t]* = [\ \t]*                            (?# assignment / binder, sans newline )
    ["'] ([^"']{5,30}) ["']                      (?# quoted password )

  categories: [fuzzy, generic, secret]

  examples:
  - |
      credential = UsernamePasswordCredential(
          client_id='da34859b-2ae4-48c3-bfe0-1b28b7cf2eed',
          username='donjuandemarco',
          password='1qay@WXS????',
          tenant_id='bc877b20-f135-4c13-a266-8ed26b8f0f4b')

  - |
      hostname = '10.11.12.13'
      username = 'donjuandemarco@example.com'
      password = '`123QWERasdf'

  - |
      hostname = '10.11.12.13'
      USERNAME = 'donjuandemarco@example.com'
      # some comment
      # some other comment
      PASS = '`123QWERasdf'

  - |
      user = 'abuser'  # some comment
      password = 'abuser123456'  # some other comment

  - |
      user = 'Aladdin'
      password = 'open sesame'


  negative_examples:
  - |
      USERNAME=donjuan
      PASSWORD=$($(dirname $0)/../bin/get-django-setting LOCAL_DATABASE_PASSWORD)
  - ":authn_dbd_params => 'host=db_host port=3306 user=apache password=###### dbname=apache_auth',"

  # FIXME: extend this rule so this actually gets matched
  - |
      #if DEBUG
                string backend_host = "amazon-subdomain-for-database.string.us-east-1.rds.amazonaws.com";
                string backend_user = "root";
                string backend_pass = "XXXXXXXXXXXXX";
                string backend_db = "database_db";
                string backend_port = "1234";



- name: Generic Username and Password
  id: np.generic.4
  pattern: |
    (?x)
    (?: username | USERNAME | user | USER)       (?# username context keyword )
    [\ \t]* = [\ \t]*                            (?# assignment / binder, sans newline )
    ([a-zA-Z0-9.@_\-+]{3,30})                    (?# unquoted username )
    \s* ;? \s*                                   (?# optional assignment separator )
    (?: \s* (?: \# | //) [^\n\r]*[\n\r])*        (?# optional line comments )
    (?: password | pass | PASSWORD | PASS)       (?# password context keyword )
    [\ \t]* = [\ \t]*                            (?# assignment / binder, sans newline )
    (\S{5,30})                                   (?# unquoted password )
    (?: \s | $ )                                 (?# end-of-password anchor )

  categories: [fuzzy, generic, secret]

  examples:
  - |
      user = Aladdin
      password = open_sesame

  - |
      user = Aladdin
      // some comment
      // some other comment
      password = open_sesame

  - ":authn_dbd_params => 'host=db_host port=3306 user=apache password=###### dbname=apache_auth',"

  negative_examples:
  - |
      user = 'Aladdin'
      password = 'open_sesame'


- name: Generic Password
  id: np.generic.5

  pattern: |
    (?x)(?i)
    password["']?                                (?# preceding context )
    [\ \t]* (?: = | : | := | => ) [\ \t]*        (?# binder )
    "
    ([^$<%@.,\s+'"(){}&/\#\-][^\s+'"(){}/]{4,})  (?# password )
    "

  categories: [fuzzy, generic, secret]

  examples:
  - |
      password = "super$ecret"
  - |
      password="super$ecret"
  - |
      String usernamePassword = "application:" + appKey + ":" + appSecret;
  - |
      my_password: "super$ecret"
  - |
      "password": "super$ecret",
  - |
      my_password := "super$ecret"
  - |
      password   =>   "super$ecret"
  - |
      "ApplicationServicesConnection" : {
          "ServiceAddress" : "https://services-dev.examples.com",
          "AdminPassword" : "thisismypassword"
      }
  - |
      private const string DevFolkoosComPfxPassword = "thisismypassword";
  - |
      "password": "YOURPASSWROD"
  - |
        create_random_name('sfrp-cli-cert2', 24),
                    'cluster_name': self.create_random_name('sfrp-cli-', 24),
                    'vm_password': "Pass123!@#",
                    'policy_path': os.path.join(TEST_DIR, 'policy.json')
                })

  negative_examples:
  - |
      password = "123"
  - |
      password = super$ecret
  - |
      password = 'super$ecret'
  - |
      "password": "$super$ecret",
  - |
      sb.append("MasterUserPassword: " + getMasterUserPassword() + ",");
  - |
      "//localhost:1337/:_password = "+new Buffer("feast").toString("base64")
  - |
      export PGPASSWORD="$gdcapi_db_password"
  - |
      define wget::authfetch($source,$destination,$user,$password="",$timeout="0",$verbose=false) {
  - |
      - echo 'export DATABASE_PASSWORD="'$PRECOMPILE_PASSWORD'"' >> .env
  - |
      "/en/enterprise/3.0/authentication/keeping-your-account-and-data-secure/creating-a-strong-password":"/en/enterprise-server@3.0/auth"
  - |
      "password": "&lt;YOURPASSWROD&gt;"
  - |
      as: 'cms_user_password'
        get '/passwords/:id/edit' => "cms/sites/passwords#edit", as: 'edit_password'
        put '/forgot-password' => "cms/sites/passwords#update", as: 'update_password'
      end
  - |
      IAMUserChangePassword = "arn:aws:iam::aws:policy/IAMUserChangePassword"
  - |
      this.addPassword = "#add-password";



- name: Generic Password
  id: np.generic.6

  pattern: |
    (?x)(?i)
    password["']?                                (?# preceding context )
    [\ \t]* (?: = | : | := | => ) [\ \t]*        (?# binder )
    '
    ([^$<%@.,\s+'"(){}&/\#\-][^\s+'"(){}/]{4,})  (?# password )
    '

  categories: [fuzzy, generic, secret]

  examples:
  - |
      :password       => '4ian1234',
  - |
      common.then_log_in({username: 'geronimo', password: '52VeZqtHDCdAr5yM'});

  - |
      beta => {
        host            => 'foo.example.com',
        user            => 'joe',
        password        => 'thisismypassword',
      }

  negative_examples:
  - |
      echo 'password = '.$p['config']['daemon_password']."\n";
  - |
      usernameLabel:"Username or email:",passwordLabel:"Password:",rememberMeLabel:"Remember me:"
  - |
      this.addPassword = '#add-password';



- name: Credentials in .NET System.Net.NetworkCredential
  id: np.generic.7

  pattern: |
    (?x)
    \b
    (?: NetworkCredential | NETWORKCREDENTIAL | networkcredential )
    \s* \( \s*
      " ( [^"\n]{3,50} ) "               (?# username )
      \s* , \s*
      " ( [^"\n]{3,50} ) "               (?# password )
    \s* \)

  categories: [fuzzy, generic, secret]

  examples:
  - |
      sender.Credentials = new NetworkCredential("NuGets@example.com", "vzihlaquknriqlht");

  - |
      $webClient.Credentials = new-object System.Net.NetworkCredential("cidownload", "AP7JaG9ToerxBc6gWP5LcU2CNpb");

  references:
  - https://learn.microsoft.com/en-us/dotnet/api/system.net.networkcredential

  description: >
    A .NET `System.Net.NetworkCredential` value with hardcoded parameters was found.
    This may allow an attack access to a resource that uses basic, digest, NTLM, or Kerberos authentication.



- name: Credentials in .NET System.DirectoryServices.DirectoryEntry
  id: np.generic.8

  pattern: |
    (?x)
    \b
    (?: DirectoryEntry | DIRECTORYENTRY | directoryentry )
    \s* \( \s*
      " ( [^"\n]{3,100} ) "               (?# path )
      \s* , \s*
      " ( [^"\n]{3,50} ) "                (?# username )
      \s* , \s*
      " ( [^"\n]{3,50} ) "                (?# password )
      (?: \s* , \s* [^)]{3,50} )?         (?# authentication type )
    \s* \)

  categories: [fuzzy, generic, secret]

  examples:
  - |
      $domain = New-Object DirectoryServices.DirectoryEntry("LDAP://10.10.10.1","domain\user", "secret")
  - |
      new DirectoryEntry("LDAP://EXAMPLE.COM",
                "ADMNALRRHH@EXAMPLE.COM",
                "Rrhh1234");

  references:
  - https://learn.microsoft.com/en-us/dotnet/api/system.directoryservices.directoryentry

  description: >
    A .NET `System.DirectoryServices.DirectoryEntry` value was found with hardcoded credentials.
    This may allow an attacker access to an Active Directory instance.


- name: Sensitive Value in .NET Configuration
  id: np.generic.9

  pattern: |
    (?x)
    < \s* add \s+ key \s* = \s*
      " (
      [^\n"]{0,20}
      (?: pass | Pass | PASS
        | secret | Secret | SECRET
        | user | User | USER
        | admin | Admin | ADMIN
        | token | Token | TOKEN
        )
      [^\n"]{0,20}
      ) "
    \s+
    value \s* = \s* " ([^\n"]{3,100}) " \s* / \s* >

  categories: [fuzzy, generic, secret]

  description: >
    A possibly-sensitive value in .NET app configuration was found.
    This may allow an attacker a way to bypass authentication or move laterally.

  examples:
  - |
      <add key="FromEmailAddress" value="killer.joe@example.com"/>
      <add key="FromEmailPassword" value="Prestigitariu$"/>

  negative_examples:
  - |
      <add key="ConnectionString_B2B" value="Server=awsbman-t,1433;Database=B2B;User ID=b2buser;Password=#gets0m3;Trusted_Connection=False" />
  - '<add key="ClearTextPassword" value="eyJ0eXAiOiAiVENWMiJ9.RkNWLXdXS3M1RVBfencxM4A0WmJzdVlCQzFj.OGY1OWRkNGMtYTUxYS04ZDYwLWFiZGYtZWE5MWFhZWJiODhh" />'


  references:
  - https://learn.microsoft.com/en-us/dotnet/desktop/winforms/advanced/application-settings-overview
  - https://learn.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/appsettings/appsettings-element-for-configuration


- name: Connection String in .NET Configuration
  id: np.generic.10

  pattern: |
    (?x)
    < \s* add \s+ key \s* = \s*
      " (
      [^\n"]{0,20}
      (?: [Cc]onnection[Ss]tring | CONNECTIONSTRING )
      [^\n"]{0,20}
      ) "
    \s+
    value \s* = \s* " ([^\n"]{3,200}) " \s* / \s* >

  categories: [fuzzy, generic, secret]

  description: >
    A possibly-sensitive connection string in .NET app configuration was found.
    This may allow an attacker direct access to a database.

  examples:
  - |
      <add key="ConnectionString_B2B" value="Server=awsbman-t,1433;Database=B2B;User ID=b2buser;Password=#gets0m3;Trusted_Connection=False" />

  negative_examples:
  - |
      <add key="FromEmailAddress" value="killer.joe@example.com"/>
      <add key="FromEmailPassword" value="Prestigitariu$"/>

  references:
  - https://learn.microsoft.com/en-us/dotnet/desktop/winforms/advanced/application-settings-overview
  - https://learn.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/appsettings/appsettings-element-for-configuration


- name: Generic Password
  id: np.generic.11

  pattern: |
    (?x)(?i)
    the\ (?: default\ )? password\ is\ '
    (
      [^'\n\#$|"{<+\ ()\\]      (?# more restrictive first character to eliminate common interpolation forms )
      [^'\n]{3,60}
    )'

  description: >
    A password was found.
    This may allow an attacker unintended access to a resource.

  categories: [fuzzy, generic, secret]

  examples:
  - |
      echo "Rrun 'bin/ipa_kinit admin' to acquire a Kerberos ticket"
      echo "The password is 'Secret123'"

  - |
      The Blooby has a default Access Point Name 'Blooby'
      The default Password is 'blooberry'


- name: Generic Password
  id: np.generic.12

  pattern: |
    (?x)(?i)
    the\ (?: default\ )? password\ is\ "
    (
      [^'\n\#$|"{<+\ ()\\]     (?# restrictive first character to suppress common interpolation forms )
      [^"\n]{3,60}
    )"

  description: >
    A password was found.
    This may allow an attacker unintended access to a resource.

  categories: [fuzzy, generic, secret]

  examples:
  - |
      so at this point, just fill in your mount point name, ensure the password is "centipede" and press the "On" button!


- name: Generic Username and Password
  id: np.generic.13

  pattern: |
    (?x)(?i)
    the\ (?: default\ )? password\ for\ (?: the\ )? (?: user|username ) \ '
    (
      [^'\n\#$|"{<+\ ()\\]     (?# restrictive first character to suppress common interpolation forms )
      [^'\n]{2,24}
    )'
    \ is\ '
    (
      [^'\n\#$|"{<+\ ()\\]     (?# restrictive first character to suppress common interpolation forms )
      [^'\n]{3,60}
    )'

  description: >
    A password was found.
    This may allow an attacker unintended access to a resource.

  categories: [fuzzy, generic, secret]

  examples:
  - |
      2. Ensure the password for user 'postgres' is 'admin' or change .env file.


- name: Generic Username and Password
  id: np.generic.14

  pattern: |
    (?x)(?i)
    the\ (?: default\ )? password\ for\ (?: the\ )? (?: user|username ) \ "
    (
      [^'\n\#$|"{<+\ ()\\]     (?# restrictive first character to suppress common interpolation forms )
      [^"\n]{2,24}
    )"
    \ is\ "
    (
      [^'\n\#$|"{<+\ ()\\]     (?# restrictive first character to suppress common interpolation forms )
      [^"\n]{3,60}
    )"

  description: >
    A password was found.
    This may allow an attacker unintended access to a resource.

  categories: [fuzzy, generic, secret]

  examples:
  - |
      The default password for the user "pyne-user" is "pyne".
