name: CI

on:
  pull_request:

  push:
    branches:
    - main

  schedule:
  # Force a run every day at 0005 UTC
  - cron: '00 05 * * *'


env:
  CARGO_TERM_COLOR: always

  # Emit backtraces on panics.
  RUST_BACKTRACE: 1

  # Disable incremental builds; see https://matklad.github.io/2021/09/04/fast-rust-builds.html:
  #
  #     CI builds often are closer to from-scratch builds, as changes are typically much bigger than from a local edit-compile cycle.
  #     For from-scratch builds, incremental adds an extra dependency-tracking overhead.
  #     It also significantly increases the amount of IO and the size of ./target, which make caching less effective.
  CARGO_INCREMENTAL: 0

  # Disable debug info in CI; speeds up builds and shrinks Actions caches a bit
  CARGO_PROFILE_RELEASE_DEBUG: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_TEST_DEBUG: 0

jobs:
  tests:
    name: Tests

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        build:
        - macos-12.stable
        - ubuntu-20.04.stable.release
        - ubuntu-22.04.stable

        include:
        - build: ubuntu-20.04.stable.release
          os: ubuntu-20.04
          rust: stable
          profile: release
          install_dependencies: |
            sudo apt-get install -y --no-install-recommends \
              libhyperscan-dev \
              pkg-config
          check_docs: false
          check_rules: false
          run_tests: true

        - build: ubuntu-22.04.stable
          os: ubuntu-22.04
          rust: stable
          profile: test
          install_dependencies: |
            sudo apt-get install -y --no-install-recommends \
              libhyperscan-dev \
              pkg-config
          check_docs: true
          check_rules: true
          run_tests: true

        - build: macos-12.stable
          os: macos-12
          rust: stable
          profile: test
          install_dependencies: |
            brew install hyperscan pkg-config
          check_docs: false
          check_rules: false
          run_tests: true

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: ${{ matrix.install_dependencies }}

    - name: Install Rust toolchain
      id: install-rust-toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache
      uses: Swatinem/rust-cache@v2

    - name: Build tests
      if: ${{ matrix.run_tests }}
      run: cargo test --no-run --locked --verbose --profile=${{ matrix.profile }}

    - name: Run tests
      if: ${{ matrix.run_tests }}
      env:
        # We use the GitHub Actions automatic token when running tests, to avoid
        # spurious failures from rate limiting when testing Nosey Parker's github
        # enumeration capabilities.
        NP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: cargo test --locked --verbose --profile=${{ matrix.profile }}

    - name: Build
      if: ${{ matrix.check_rules }}
      run: cargo build --locked --verbose --profile=${{ matrix.profile }}

    - name: Check rules
      if: ${{ matrix.check_rules }}
      run: cargo run --locked --verbose --profile=${{ matrix.profile }} -- rules check data/default/rules --warnings-as-errors

    - name: Check documentation
      if: ${{ matrix.check_docs }}
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --locked --verbose --profile=${{ matrix.profile }} --no-deps --document-private-items

    # - name: Upload binary
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: noseyparker.x86_64-unknown-linux-gnu
    #     path: target/release/noseyparker
    #     if-no-files-found: error
