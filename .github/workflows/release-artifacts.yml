name: Release Artifacts

on:
  push:
    # The multiplatform Docker image is expensive to build (3h), so we are not
    # currently running it for every commit to `main`.
    # See #39 for more context.
    #
    # branches: [ "main" ]

    # Run when release tags are created
    tags: [ "v*.*.*" ]

  # allow manual triggering
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:

jobs:
  docker:
    strategy:
      matrix:
        include:
        - build: debian
          dockerfile: Dockerfile
          image: ghcr.io/${{ github.repository }}

        - build: alpine
          dockerfile: Dockerfile.alpine
          image: ghcr.io/${{ github.repository }}-alpine

    name: Docker
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - uses: docker/setup-qemu-action@v3  # for multi-platform build

    - uses: docker/setup-buildx-action@v3

    - name: Install dependencies
      run: |
        sudo apt-get install zsh

    - name: Authenticate with GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker metadata
      id: docker_metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ matrix.image }}

        # see https://github.com/docker/metadata-action#tags-input
        tags: |
          type=semver,pattern={{raw}}
          type=ref,event=tag
          type=ref,event=pr
          type=ref,event=branch

    - name: Build linux/amd64 Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64
        push: false
        load: true
        pull: true

        tags: noseyparker:test
        labels: |
          ${{ steps.docker_metadata.outputs.labels }}
          org.opencontainers.image.title=${{ github.event.repository.name }}
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

    - name: Test the Docker image
      run: docker run --rm noseyparker:test --version

    # This shouldn't end up building linux/amd64 again; it should get it from the local Docker cache
    - name: Build multiplatform Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        pull: true

        tags: ${{ steps.docker_metadata.outputs.tags }}
        labels: |
          ${{ steps.docker_metadata.outputs.labels }}
          org.opencontainers.image.title=${{ github.event.repository.name }}
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}


  native:
    name: ${{ matrix.build }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
        - build: ubuntu-20.04.x86_64
          os: ubuntu-20.04
          rust: stable
          install_dependencies: |
            sudo apt-get install zsh libboost-all-dev

        - build: macos-13.x86_64
          os: macos-13
          rust: stable
          install_dependencies: |
            brew install coreutils boost

        - build: macos-13.arm64
          os: macos-13-xlarge
          rust: stable
          install_dependencies: |
            brew install coreutils boost

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: ${{ matrix.install_dependencies }}

    - name: Install Rust toolchain
      id: install-rust-toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Build release
      run: |
        ./scripts/create-release.zsh

    - name: Run integration tests on release
      run: |
        NP_TEST_PROGRAM="$PWD"/release/bin/noseyparker cargo test --test test_noseyparker
      env:
        # We use the GitHub Actions automatic token when running tests, to avoid
        # spurious failures from rate limiting when testing Nosey Parker's github
        # enumeration capabilities.
        NP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release archive
      id: release-archive
      run: |
        FILENAME="$(./release/bin/noseyparker -V | tr ' ' '-').tar.gz"
        tar -C release -c -z -f "$FILENAME" .
        echo "filename=$FILENAME" >> "$GITHUB_OUTPUT"

    - name: Upload release files
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.release-archive.outputs.filename }}
        path: ${{ steps.release-archive.outputs.filename }}
        compression-level: 0
        if-no-files-found: error
