---
source: tests/cli.rs
expression: stdout
---
Scan content for secrets

This command uses regex-based rules to identify hardcoded secrets and other potentially sensitive
information in textual content (or in inputs that can have textual content extracted from them).

The inputs can be either files or directories. Files are scanned directly; directories are
recursively enumerated and scanned. Any Git repositories encountered will have their entire history
scanned.

The findings from scanning are recorded into a datastore. The recorded findings can later be
reported in several formats using the `summarize` and `report` commands.

Usage: noseyparker scan [OPTIONS] --datastore <PATH> <INPUT>...

Arguments:
  <INPUT>...
          Paths of inputs to scan
          
          Inputs can be files, directories, or Git repositories.

Options:
  -d, --datastore <PATH>
          Use the specified datastore path
          
          The datastore will be created if it does not exist.
          
          [env: NP_DATASTORE=]

  -j, --jobs <N>
          The number of parallel scanning jobs
          
          [default: DEFAULT]

  -r, --rules <PATH>
          Path of custom rules to use
          
          The paths can be either files or directories. Directories are recursively walked and all
          found rule files will be loaded.
          
          This option can be repeated.

  -h, --help
          Print help (see a summary with '-h')

Content Discovery Options:
      --max-file-size <MEGABYTES>
          Do not scan files larger than the specified size
          
          The value is parsed as a floating point literal, and hence can be non-integral. A negative
          value means "no limit". Note that scanning requires reading the entire contents of each
          file into memory, so using an excessively large limit may be problematic.
          
          [default: 100]

  -i, --ignore <FILE>
          Path of a custom ignore rules file to use
          
          The ignore file should contain gitignore-style rules.
          
          This option can be repeated.

Global Options:
  -v, --verbose...
          Enable verbose output
          
          This can be repeated up to 3 times to enable successively more output.

      --color <MODE>
          Enable or disable colored output
          
          When this is "auto", colors are enabled when stdout is a tty.
          
          If the `NO_COLOR` environment variable is set, it takes precedence and is equivalent to
          `--color=never`.
          
          [default: auto]
          [possible values: auto, never, always]

      --progress <MODE>
          Enable or disable progress bars
          
          When this is "auto", progress bars are enabled when stderr is a tty.
          
          [default: auto]
          [possible values: auto, never, always]

